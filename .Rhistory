la_map_pal <- colorNumeric(
palette = "Reds",
domain = la_map$LALOWI1_10
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = la_map,
fillColor = ~la_map_pal(LALOWI1_10),
color = "gray",
weight = 0.5,
fillOpacity = 1,
label = ~LALOWI1_10
) %>%
addLegend(
data = la_map,
pal = la_map_pal,
values = ~LALOWI1_10,
title = "Map of Low Access and<br>Low Income population in<br>Alameda and San Francisco"
)
View(data_2019)
View(data_2019)
View(data_2019)
#data cleaning for equity analysis
data_2019_equity_one <-
data_2019 %>%
select(c("County", "lawhite1", "lablack1", "laasian1", "lanhopi1", "laaian1", "laomultir1")) %>%
filter(lawhite1 != "NULL") %>%
pivot_longer(
starts_with("la"),
names_to = "race",
values_to = "estimate"
) %>%
mutate(
race = case_when(
race == "lawhite1" ~ race_categories[1],
race == "lablack1" ~ race_categories[2],
race == "laasian1" ~ race_categories[4],
race == "lanhopi1" ~ race_categories[5],
race == "laaian1" ~ race_categories[3],
race == "laomultir1" ~ race_categories[7],
)
)
equity_clean_one <-
data_2019_equity_one %>%
mutate(
estimate = as.numeric(estimate),
estimate = round(estimate)
) %>%
group_by(race, County) %>%
summarise(estimate = sum(estimate))
one_stacked <-
equity_clean_one %>%
ggplot() +
geom_bar(
aes(
x = County,
y = estimate,
fill = race %>% factor(levels = rev(unique(equity_clean_one$race)))
),
stat = "identity",
position = "stack"
) +
labs(
x = "Counties",
y = "Number of individuals",
title = "Individuals whose households are beyond\na 1 mile radius of a grocery store by race",
fill = "Race of individual"
) +
coord_flip() +
theme(
legend.position = "bottom",
legend.direction = "vertical"
)  +
guides(
fill = guide_legend(
reverse = T
)
)
one_stacked
one_stacked
one_filled
half_filled
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = la_map,
fillColor = ~la_map_pal(LALOWI1_10),
color = "gray",
weight = 0.5,
fillOpacity = 1,
label = ~LALOWI1_10
) %>%
addLegend(
data = la_map,
pal = la_map_pal,
values = ~LALOWI1_10,
title = "Map of Low Access and<br>Low Income population in<br>Alameda and San Francisco"
)
bay_cardio_poverty_tract <-
ces4_map %>%
filter(
!is.na(`Cardiovascular Disease`),
!is.na(Poverty)
)
ggplot(
data = bay_cardio_poverty_tract,
aes(
x = Poverty,
y = `Cardiovascular Disease`
)) +
geom_point() +
labs(
title = "Cardiovascular Disease x Poverty Scatter Plot"
) +
geom_smooth(method = "lm")
model <- lm(`Cardiovascular Disease` ~ Poverty, bay_cardio_poverty_tract)
summary(model)
plot(density(residuals(model)))
plot(density(residuals(model_log)))
ggplot(
data = bay_cardio_poverty_tract,
aes(
x = Poverty,
y = log(`Cardiovascular Disease`)
)) +
geom_point() +
labs(
title = "Cardiovascular Disease x Poverty Scatter Plot LOG"
) +
geom_smooth(method = "lm")
#geographically mapping the residuals
data_with_residuals <-
bay_cardio_poverty_tract %>%
mutate(
Residuals = residuals(model)
)
residuals_pal <- colorNumeric(
palette = "YlOrRd",
domain = data_with_residuals$Residuals
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = data_with_residuals,
fillColor = ~residuals_pal(Residuals),
color = "red",
weight = 0.3,
fillOpacity = 0.6,
label = ~Residuals
) %>%
addLegend(
data = data_with_residuals,
pal = residuals_pal,
values = ~Residuals,
title = "Residuals"
)
#downloaded food atlas data, combined race categories and cleaned to achieve table with estimates for race breakdown and county breakdown (again, Alameda and San Francisco only)
data_2019 <- read_excel("FoodAccessResearchAtlasData2019.xlsx", sheet = 3) %>%
filter(County %in% c("Alameda County", "San Francisco County"))
#mapping
la_map <-
data_2019 %>%
select(c("CensusTract", "LALOWI1_10")) %>%
filter(LALOWI1_10 != "NULL") %>%
mutate(
CensusTract = as.numeric(CensusTract),
LALOWI1_10 = as.numeric(LALOWI1_10)
) %>%
left_join(
ca_tracts %>%
transmute(GEOID = as.numeric(GEOID)),
by = c("CensusTract" = "GEOID")
) %>%
st_as_sf()
la_map_pal <- colorNumeric(
palette = "Reds",
domain = la_map$LALOWI1_10
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = la_map,
fillColor = ~la_map_pal(LALOWI1_10),
color = "gray",
weight = 0.5,
fillOpacity = 1,
label = ~LALOWI1_10
) %>%
addLegend(
data = la_map,
pal = la_map_pal,
values = ~LALOWI1_10,
title = "Map of Low Access<br> to a supermarket (more than 1 miles away) and<br>Low Income population in<br>Alameda and San Francisco<br>"
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = la_map,
fillColor = ~la_map_pal(LALOWI1_10),
color = "gray",
weight = 0.5,
fillOpacity = 1,
label = ~LALOWI1_10
) %>%
addLegend(
data = la_map,
pal = la_map_pal,
values = ~LALOWI1_10,
title = "Map of Low Access to a<br> Aupermarket (more than 1 mile away)<br> and Low Income Population in<br>Alameda and San Francisco<br>"
)
equity_clean_one <-
data_2019_equity_one %>%
mutate(
estimate = as.numeric(estimate),
estimate = round(estimate)
) %>%
group_by(race, County) %>%
summarise(estimate = sum(estimate))
#data cleaning for equity analysis
data_2019_equity_one <-
data_2019 %>%
select(c("County", "lawhite1", "lablack1", "laasian1", "lanhopi1", "laaian1", "laomultir1")) %>%
filter(lawhite1 != "NULL") %>%
pivot_longer(
starts_with("la"),
names_to = "race",
values_to = "estimate"
) %>%
mutate(
race = case_when(
race == "lawhite1" ~ race_categories[1],
race == "lablack1" ~ race_categories[2],
race == "laasian1" ~ race_categories[4],
race == "lanhopi1" ~ race_categories[5],
race == "laaian1" ~ race_categories[3],
race == "laomultir1" ~ race_categories[7],
)
)
equity_clean_one <-
data_2019_equity_one %>%
mutate(
estimate = as.numeric(estimate),
estimate = round(estimate)
) %>%
group_by(race, County) %>%
summarise(estimate = sum(estimate))
one_stacked <-
equity_clean_one %>%
ggplot() +
geom_bar(
aes(
x = County,
y = estimate,
fill = race %>% factor(levels = rev(unique(equity_clean_one$race)))
),
stat = "identity",
position = "stack"
) +
labs(
x = "Counties",
y = "Number of individuals",
title = "Individuals whose households are beyond\na 1 mile radius of a grocery store by race",
fill = "Race of individual"
) +
coord_flip() +
theme(
legend.position = "bottom",
legend.direction = "vertical"
)  +
guides(
fill = guide_legend(
reverse = T
)
)
one_stacked
one_filled
one_filled <-
equity_clean_one %>%
ggplot() +
geom_bar(
aes(
x = County,
y = estimate,
fill = race %>% factor(levels = rev(unique(equity_clean_one$race)))
),
stat = "identity",
position = "fill"
) +
labs(
x = "Counties",
y = "% of individuals",
title = "% of individuals whose households are beyond\na 1 mile radius of a grocery store by race",
fill = "Race of individual"
) +
coord_flip() +
theme(
legend.position = "bottom",
legend.direction = "vertical"
)  +
guides(
fill = guide_legend(
reverse = T
)
)
one_filled
half_filled
half_filled <-
equity_clean_half %>%
ggplot() +
geom_bar(
aes(
x = County,
y = estimate,
fill = race %>% factor(levels = rev(unique(equity_clean_one$race)))
),
stat = "identity",
position = "fill"
) +
labs(
x = "Counties",
y = "% of individuals",
title = "% of individuals whose households are more than\na .5 mile radius of a grocery store by race",
fill = "Race of individual"
) +
coord_flip() +
theme(
legend.position = "bottom",
legend.direction = "vertical"
)  +
guides(
fill = guide_legend(
reverse = T
)
)
half_filled
#still following the steps from assignment 5, we filtered for the Cardiovascular Disease variable in ces4
ces4_bay_cardio <-
ces4_clean %>%
filter(`California County` %in% project_county_names) %>%
select(`Census Tract`, `Cardiovascular Disease`) %>%
left_join(
ca_tracts %>%
transmute(GEOID = as.numeric(GEOID)),
by = c("Census Tract" = "GEOID")
) %>%
st_as_sf()
#used leaflet to map variable in geographical form focusing on our interest location (only Alameda and San Francisco counties)
cardio_pal <- colorNumeric(
palette = "Blues",
domain = ces4_bay_cardio$`Cardiovascular Disease`
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = ces4_bay_cardio,
fillColor = ~cardio_pal(`Cardiovascular Disease`),
color = "gray",
weight = 0.5,
fillOpacity = 0.7,
label = ~`Cardiovascular Disease`
) %>%
addLegend(
data = ces4_bay_cardio,
pal = cardio_pal,
values = ~`Cardiovascular Disease`,
title = "Prevalence of CardioVascular Disease"
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = ces4_bay_poverty,
fillColor = ~poverty_pal(Poverty),
color = "gray",
weight = 0.5,
fillOpacity = 0.7,
label = ~Poverty
) %>%
addLegend(
data = ces4_bay_poverty,
pal = poverty_pal,
values = ~Poverty,
title = "Poverty Level"
)
poverty_pal <- colorNumeric(
palette = "Blues",
domain = ces4_bay_cardio$Poverty
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = ces4_bay_poverty,
fillColor = ~poverty_pal(Poverty),
color = "gray",
weight = 0.5,
fillOpacity = 0.7,
label = ~Poverty
) %>%
addLegend(
data = ces4_bay_poverty,
pal = poverty_pal,
values = ~Poverty,
title = "Poverty Level"
)
#scatter plot to show correlation between two factors in graph
bay_cardio_poverty_tract <-
ces4_map %>%
filter(
!is.na(`Cardiovascular Disease`),
!is.na(Poverty)
)
ggplot(
data = bay_cardio_poverty_tract,
aes(
x = Poverty,
y = `Cardiovascular Disease`
)) +
geom_point() +
labs(
title = "Cardiovascular Disease x Poverty Scatter Plot"
) +
geom_smooth(method = "lm")
#model shows correlation between two factors in a numerical table
model <- lm(`Cardiovascular Disease` ~ Poverty, bay_cardio_poverty_tract)
summary(model)
plot(density(residuals(model)))
#geographically mapping the residuals
data_with_residuals <-
bay_cardio_poverty_tract %>%
mutate(
Residuals = residuals(model)
)
residuals_pal <- colorNumeric(
palette = "YlOrRd",
domain = data_with_residuals$Residuals
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = data_with_residuals,
fillColor = ~residuals_pal(Residuals),
color = "red",
weight = 0.3,
fillOpacity = 0.6,
label = ~Residuals
) %>%
addLegend(
data = data_with_residuals,
pal = residuals_pal,
values = ~Residuals,
title = "Residuals"
)
#building the logit model using the factores we have identified
logit_model <- glm(
allocated ~ building + tenure + kitchen + puma,
family = quasibinomial(),
data = bay_pums_factored
)
summary(logit_model)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = bay_pumas,
weight = 1,
color = "gray",
label = ~PUMACE10
) %>%
addPolygons(
data = bay_pumas %>%
filter(PUMACE10 == "00104"),
color = "navy",
label = "00104"
) %>%
addPolygons(
data = bay_pumas %>%
filter(PUMACE10 == "00107"),
color = "brown",
label = "00107"
)
#building the logit model using the factores we have identified
logit_model <- glm(
allocated ~ building + tenure + kitchen + puma,
family = quasibinomial(),
data = bay_pums_factored
)
summary(logit_model)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = bay_pumas,
weight = 1,
color = "gray",
label = ~PUMACE10
) %>%
addPolygons(
data = bay_pumas %>%
filter(PUMACE10 == "07501"),
color = "navy",
label = "07501"
) %>%
addPolygons(
data = bay_pumas %>%
filter(PUMACE10 == "00106"),
color = "brown",
label = "00106"
) %>%
addPolygons(
data = bay_pumas %>%
filter(PUMACE10 == "07502"),
color = "purple",
label = "07502"
)
